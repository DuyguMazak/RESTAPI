name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get previous release tag
        id: get_prev_tag
        run: echo ::set-output name=PREV_TAG::$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1))
      - name: Increment version number
        id: increment_version
        run: |
          if [ ! "$(grep '\[skip ci\]' <<< "${{ github.event.head_commit.message }}")" ]; then
            echo "::set-output name=VERSION::$(node -p "require('semver').inc(process.env.PREV_TAG, 'patch')")"
          else
            echo "::set-output name=VERSION::${{ steps.get_prev_tag.outputs.PREV_TAG }}"
          fi
        env:
          PREV_TAG: ${{ steps.get_prev_tag.outputs.PREV_TAG }}
      - name: Build Docker image
        run: docker build -t docker.pkg.github.com/duygumazak/restapi/myimage:${{ steps.increment_version.outputs.VERSION }} .
      - name: Login to GitHub Packages
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: ${{ github.actor }}
          password: ${{ secrets.PASSWORD }}
      - name: Push Docker image
        run: docker push docker.pkg.github.com/duygumazak/restapi/myimage:${{ steps.increment_version.outputs.VERSION }} .
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.PASSWORD }}
        with:
          tag_name: ${{ steps.increment_version.outputs.VERSION }}
          release_name: Release ${{ steps.increment_version.outputs.VERSION }}
          body: |
            This is a new release.
          draft: false
          prerelease: false